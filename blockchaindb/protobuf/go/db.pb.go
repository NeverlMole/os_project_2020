// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.7.1
// source: db.proto

package blockdb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type VerifyResponse_Results int32

const (
	VerifyResponse_FAILED    VerifyResponse_Results = 0
	VerifyResponse_PENDING   VerifyResponse_Results = 1
	VerifyResponse_SUCCEEDED VerifyResponse_Results = 2
)

// Enum value maps for VerifyResponse_Results.
var (
	VerifyResponse_Results_name = map[int32]string{
		0: "FAILED",
		1: "PENDING",
		2: "SUCCEEDED",
	}
	VerifyResponse_Results_value = map[string]int32{
		"FAILED":    0,
		"PENDING":   1,
		"SUCCEEDED": 2,
	}
)

func (x VerifyResponse_Results) Enum() *VerifyResponse_Results {
	p := new(VerifyResponse_Results)
	*p = x
	return p
}

func (x VerifyResponse_Results) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerifyResponse_Results) Descriptor() protoreflect.EnumDescriptor {
	return file_db_proto_enumTypes[0].Descriptor()
}

func (VerifyResponse_Results) Type() protoreflect.EnumType {
	return &file_db_proto_enumTypes[0]
}

func (x VerifyResponse_Results) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerifyResponse_Results.Descriptor instead.
func (VerifyResponse_Results) EnumDescriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{5, 0}
}

type Transaction_Types int32

const (
	Transaction_UNKNOWN  Transaction_Types = 0
	Transaction_TRANSFER Transaction_Types = 5
)

// Enum value maps for Transaction_Types.
var (
	Transaction_Types_name = map[int32]string{
		0: "UNKNOWN",
		5: "TRANSFER",
	}
	Transaction_Types_value = map[string]int32{
		"UNKNOWN":  0,
		"TRANSFER": 5,
	}
)

func (x Transaction_Types) Enum() *Transaction_Types {
	p := new(Transaction_Types)
	*p = x
	return p
}

func (x Transaction_Types) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transaction_Types) Descriptor() protoreflect.EnumDescriptor {
	return file_db_proto_enumTypes[1].Descriptor()
}

func (Transaction_Types) Type() protoreflect.EnumType {
	return &file_db_proto_enumTypes[1]
}

func (x Transaction_Types) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transaction_Types.Descriptor instead.
func (Transaction_Types) EnumDescriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{7, 0}
}

type GetBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash string `protobuf:"bytes,1,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
}

func (x *GetBlockRequest) Reset() {
	*x = GetBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockRequest) ProtoMessage() {}

func (x *GetBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockRequest.ProtoReflect.Descriptor instead.
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{0}
}

func (x *GetBlockRequest) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID string `protobuf:"bytes,1,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{1}
}

func (x *GetRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{2}
}

func (x *GetResponse) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type GetHeightResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height   int32  `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	LeafHash string `protobuf:"bytes,2,opt,name=LeafHash,proto3" json:"LeafHash,omitempty"`
}

func (x *GetHeightResponse) Reset() {
	*x = GetHeightResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeightResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeightResponse) ProtoMessage() {}

func (x *GetHeightResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeightResponse.ProtoReflect.Descriptor instead.
func (*GetHeightResponse) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{3}
}

func (x *GetHeightResponse) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *GetHeightResponse) GetLeafHash() string {
	if x != nil {
		return x.LeafHash
	}
	return ""
}

type BooleanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *BooleanResponse) Reset() {
	*x = BooleanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanResponse) ProtoMessage() {}

func (x *BooleanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanResponse.ProtoReflect.Descriptor instead.
func (*BooleanResponse) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{4}
}

func (x *BooleanResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type VerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    VerifyResponse_Results `protobuf:"varint,1,opt,name=Result,proto3,enum=blockdb.VerifyResponse_Results" json:"Result,omitempty"`
	BlockHash string                 `protobuf:"bytes,2,opt,name=BlockHash,proto3" json:"BlockHash,omitempty"`
}

func (x *VerifyResponse) Reset() {
	*x = VerifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyResponse) ProtoMessage() {}

func (x *VerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyResponse.ProtoReflect.Descriptor instead.
func (*VerifyResponse) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{5}
}

func (x *VerifyResponse) GetResult() VerifyResponse_Results {
	if x != nil {
		return x.Result
	}
	return VerifyResponse_FAILED
}

func (x *VerifyResponse) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

type Null struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Null) Reset() {
	*x = Null{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Null) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Null) ProtoMessage() {}

func (x *Null) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Null.ProtoReflect.Descriptor instead.
func (*Null) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{6}
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      Transaction_Types `protobuf:"varint,1,opt,name=Type,proto3,enum=blockdb.Transaction_Types" json:"Type,omitempty"`
	FromID    string            `protobuf:"bytes,3,opt,name=FromID,proto3" json:"FromID,omitempty"` // Optional
	ToID      string            `protobuf:"bytes,4,opt,name=ToID,proto3" json:"ToID,omitempty"`     // Optional
	Value     int32             `protobuf:"varint,5,opt,name=Value,proto3" json:"Value,omitempty"`
	MiningFee int32             `protobuf:"varint,6,opt,name=MiningFee,proto3" json:"MiningFee,omitempty"`
	UUID      string            `protobuf:"bytes,7,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{7}
}

func (x *Transaction) GetType() Transaction_Types {
	if x != nil {
		return x.Type
	}
	return Transaction_UNKNOWN
}

func (x *Transaction) GetFromID() string {
	if x != nil {
		return x.FromID
	}
	return ""
}

func (x *Transaction) GetToID() string {
	if x != nil {
		return x.ToID
	}
	return ""
}

func (x *Transaction) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Transaction) GetMiningFee() int32 {
	if x != nil {
		return x.MiningFee
	}
	return 0
}

func (x *Transaction) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type JsonBlockString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json string `protobuf:"bytes,1,opt,name=Json,proto3" json:"Json,omitempty"`
}

func (x *JsonBlockString) Reset() {
	*x = JsonBlockString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonBlockString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonBlockString) ProtoMessage() {}

func (x *JsonBlockString) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonBlockString.ProtoReflect.Descriptor instead.
func (*JsonBlockString) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{8}
}

func (x *JsonBlockString) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockID      int32          `protobuf:"varint,1,opt,name=BlockID,proto3" json:"BlockID,omitempty"`
	PrevHash     string         `protobuf:"bytes,2,opt,name=PrevHash,proto3" json:"PrevHash,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,3,rep,name=Transactions,proto3" json:"Transactions,omitempty"`
	MinerID      string         `protobuf:"bytes,4,opt,name=MinerID,proto3" json:"MinerID,omitempty"`
	Nonce        string         `protobuf:"bytes,5,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{9}
}

func (x *Block) GetBlockID() int32 {
	if x != nil {
		return x.BlockID
	}
	return 0
}

func (x *Block) GetPrevHash() string {
	if x != nil {
		return x.PrevHash
	}
	return ""
}

func (x *Block) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *Block) GetMinerID() string {
	if x != nil {
		return x.MinerID
	}
	return ""
}

func (x *Block) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

var File_db_proto protoreflect.FileDescriptor

var file_db_proto_rawDesc = []byte{
	0x0a, 0x08, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x64, 0x62, 0x22, 0x2f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x24, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x23, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x47, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x65, 0x61, 0x66, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4c, 0x65, 0x61, 0x66, 0x48, 0x61, 0x73, 0x68, 0x22, 0x2b, 0x0a, 0x0f, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22,
	0x31, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44,
	0x10, 0x02, 0x22, 0x06, 0x0a, 0x04, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0xdb, 0x01, 0x0a, 0x0b, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x64, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x72,
	0x6f, 0x6d, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x72, 0x6f, 0x6d,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x6f, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x54, 0x6f, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22, 0x22,
	0x0a, 0x05, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x10, 0x05, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x25, 0x0a, 0x0f, 0x4a, 0x73, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x4a,
	0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4a, 0x73, 0x6f, 0x6e, 0x22,
	0xa7, 0x01, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x65, 0x76, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x38, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x62, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x32, 0xe6, 0x03, 0x0a, 0x0f, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x32, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3c, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x14, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x62, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x64, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x17, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64,
	0x62, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x1a, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x64, 0x62, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x09, 0x50, 0x75, 0x73, 0x68, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x62, 0x2e, 0x4a, 0x73,
	0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0d, 0x2e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x62, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x0f, 0x50, 0x75, 0x73, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64,
	0x62, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x0d, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64,
	0x62, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x1a, 0x18, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x64, 0x62,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0x00, 0x42, 0x29, 0x0a, 0x1c, 0x69, 0x69, 0x69, 0x73, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x2e, 0x6f, 0x73, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x64, 0x62, 0x42, 0x07, 0x44, 0x42, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_db_proto_rawDescOnce sync.Once
	file_db_proto_rawDescData = file_db_proto_rawDesc
)

func file_db_proto_rawDescGZIP() []byte {
	file_db_proto_rawDescOnce.Do(func() {
		file_db_proto_rawDescData = protoimpl.X.CompressGZIP(file_db_proto_rawDescData)
	})
	return file_db_proto_rawDescData
}

var file_db_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_db_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_db_proto_goTypes = []interface{}{
	(VerifyResponse_Results)(0), // 0: blockdb.VerifyResponse.Results
	(Transaction_Types)(0),      // 1: blockdb.Transaction.Types
	(*GetBlockRequest)(nil),     // 2: blockdb.GetBlockRequest
	(*GetRequest)(nil),          // 3: blockdb.GetRequest
	(*GetResponse)(nil),         // 4: blockdb.GetResponse
	(*GetHeightResponse)(nil),   // 5: blockdb.GetHeightResponse
	(*BooleanResponse)(nil),     // 6: blockdb.BooleanResponse
	(*VerifyResponse)(nil),      // 7: blockdb.VerifyResponse
	(*Null)(nil),                // 8: blockdb.Null
	(*Transaction)(nil),         // 9: blockdb.Transaction
	(*JsonBlockString)(nil),     // 10: blockdb.JsonBlockString
	(*Block)(nil),               // 11: blockdb.Block
}
var file_db_proto_depIdxs = []int32{
	0,  // 0: blockdb.VerifyResponse.Result:type_name -> blockdb.VerifyResponse.Results
	1,  // 1: blockdb.Transaction.Type:type_name -> blockdb.Transaction.Types
	9,  // 2: blockdb.Block.Transactions:type_name -> blockdb.Transaction
	3,  // 3: blockdb.BlockChainMiner.Get:input_type -> blockdb.GetRequest
	9,  // 4: blockdb.BlockChainMiner.Transfer:input_type -> blockdb.Transaction
	9,  // 5: blockdb.BlockChainMiner.Verify:input_type -> blockdb.Transaction
	8,  // 6: blockdb.BlockChainMiner.GetHeight:input_type -> blockdb.Null
	2,  // 7: blockdb.BlockChainMiner.GetBlock:input_type -> blockdb.GetBlockRequest
	10, // 8: blockdb.BlockChainMiner.PushBlock:input_type -> blockdb.JsonBlockString
	9,  // 9: blockdb.BlockChainMiner.PushTransaction:input_type -> blockdb.Transaction
	8,  // 10: blockdb.BlockChainMiner.GetCurBlock:input_type -> blockdb.Null
	4,  // 11: blockdb.BlockChainMiner.Get:output_type -> blockdb.GetResponse
	6,  // 12: blockdb.BlockChainMiner.Transfer:output_type -> blockdb.BooleanResponse
	7,  // 13: blockdb.BlockChainMiner.Verify:output_type -> blockdb.VerifyResponse
	5,  // 14: blockdb.BlockChainMiner.GetHeight:output_type -> blockdb.GetHeightResponse
	10, // 15: blockdb.BlockChainMiner.GetBlock:output_type -> blockdb.JsonBlockString
	8,  // 16: blockdb.BlockChainMiner.PushBlock:output_type -> blockdb.Null
	8,  // 17: blockdb.BlockChainMiner.PushTransaction:output_type -> blockdb.Null
	10, // 18: blockdb.BlockChainMiner.GetCurBlock:output_type -> blockdb.JsonBlockString
	11, // [11:19] is the sub-list for method output_type
	3,  // [3:11] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_db_proto_init() }
func file_db_proto_init() {
	if File_db_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_db_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeightResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Null); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JsonBlockString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_db_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_db_proto_goTypes,
		DependencyIndexes: file_db_proto_depIdxs,
		EnumInfos:         file_db_proto_enumTypes,
		MessageInfos:      file_db_proto_msgTypes,
	}.Build()
	File_db_proto = out.File
	file_db_proto_rawDesc = nil
	file_db_proto_goTypes = nil
	file_db_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BlockChainMinerClient is the client API for BlockChainMiner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockChainMinerClient interface {
	// Return UserID's Balance on the Chain, after considering the latest valid block. Pending transactions have no effect on Get()
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Receive and Broadcast Transaction: balance[FromID]-=Value, balance[ToID]+=(Value-MiningFee), balance[MinerID]+=MiningFee
	// Return Success=false if FromID is same as ToID or latest balance of FromID is insufficient
	Transfer(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*BooleanResponse, error)
	// Check if a transaction has been written into a block, or is still waiting, or is invalid on the longest branch.
	Verify(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*VerifyResponse, error)
	// Get the current blockchain length; use the longest branch if multiple branch exist.
	GetHeight(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetHeightResponse, error)
	// Get the Json representation of the block with BlockHash hash value
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*JsonBlockString, error)
	// Send a block to another server
	PushBlock(ctx context.Context, in *JsonBlockString, opts ...grpc.CallOption) (*Null, error)
	// Send a transaction to another server
	PushTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Null, error)
	GetCurBlock(ctx context.Context, in *Null, opts ...grpc.CallOption) (*JsonBlockString, error)
}

type blockChainMinerClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockChainMinerClient(cc grpc.ClientConnInterface) BlockChainMinerClient {
	return &blockChainMinerClient{cc}
}

func (c *blockChainMinerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/blockdb.BlockChainMiner/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainMinerClient) Transfer(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*BooleanResponse, error) {
	out := new(BooleanResponse)
	err := c.cc.Invoke(ctx, "/blockdb.BlockChainMiner/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainMinerClient) Verify(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, "/blockdb.BlockChainMiner/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainMinerClient) GetHeight(ctx context.Context, in *Null, opts ...grpc.CallOption) (*GetHeightResponse, error) {
	out := new(GetHeightResponse)
	err := c.cc.Invoke(ctx, "/blockdb.BlockChainMiner/GetHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainMinerClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*JsonBlockString, error) {
	out := new(JsonBlockString)
	err := c.cc.Invoke(ctx, "/blockdb.BlockChainMiner/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainMinerClient) PushBlock(ctx context.Context, in *JsonBlockString, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/blockdb.BlockChainMiner/PushBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainMinerClient) PushTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := c.cc.Invoke(ctx, "/blockdb.BlockChainMiner/PushTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainMinerClient) GetCurBlock(ctx context.Context, in *Null, opts ...grpc.CallOption) (*JsonBlockString, error) {
	out := new(JsonBlockString)
	err := c.cc.Invoke(ctx, "/blockdb.BlockChainMiner/GetCurBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockChainMinerServer is the server API for BlockChainMiner service.
type BlockChainMinerServer interface {
	// Return UserID's Balance on the Chain, after considering the latest valid block. Pending transactions have no effect on Get()
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Receive and Broadcast Transaction: balance[FromID]-=Value, balance[ToID]+=(Value-MiningFee), balance[MinerID]+=MiningFee
	// Return Success=false if FromID is same as ToID or latest balance of FromID is insufficient
	Transfer(context.Context, *Transaction) (*BooleanResponse, error)
	// Check if a transaction has been written into a block, or is still waiting, or is invalid on the longest branch.
	Verify(context.Context, *Transaction) (*VerifyResponse, error)
	// Get the current blockchain length; use the longest branch if multiple branch exist.
	GetHeight(context.Context, *Null) (*GetHeightResponse, error)
	// Get the Json representation of the block with BlockHash hash value
	GetBlock(context.Context, *GetBlockRequest) (*JsonBlockString, error)
	// Send a block to another server
	PushBlock(context.Context, *JsonBlockString) (*Null, error)
	// Send a transaction to another server
	PushTransaction(context.Context, *Transaction) (*Null, error)
	GetCurBlock(context.Context, *Null) (*JsonBlockString, error)
}

// UnimplementedBlockChainMinerServer can be embedded to have forward compatible implementations.
type UnimplementedBlockChainMinerServer struct {
}

func (*UnimplementedBlockChainMinerServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedBlockChainMinerServer) Transfer(context.Context, *Transaction) (*BooleanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (*UnimplementedBlockChainMinerServer) Verify(context.Context, *Transaction) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (*UnimplementedBlockChainMinerServer) GetHeight(context.Context, *Null) (*GetHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeight not implemented")
}
func (*UnimplementedBlockChainMinerServer) GetBlock(context.Context, *GetBlockRequest) (*JsonBlockString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedBlockChainMinerServer) PushBlock(context.Context, *JsonBlockString) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushBlock not implemented")
}
func (*UnimplementedBlockChainMinerServer) PushTransaction(context.Context, *Transaction) (*Null, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushTransaction not implemented")
}
func (*UnimplementedBlockChainMinerServer) GetCurBlock(context.Context, *Null) (*JsonBlockString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurBlock not implemented")
}

func RegisterBlockChainMinerServer(s *grpc.Server, srv BlockChainMinerServer) {
	s.RegisterService(&_BlockChainMiner_serviceDesc, srv)
}

func _BlockChainMiner_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainMinerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdb.BlockChainMiner/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainMinerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainMiner_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainMinerServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdb.BlockChainMiner/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainMinerServer).Transfer(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainMiner_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainMinerServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdb.BlockChainMiner/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainMinerServer).Verify(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainMiner_GetHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainMinerServer).GetHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdb.BlockChainMiner/GetHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainMinerServer).GetHeight(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainMiner_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainMinerServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdb.BlockChainMiner/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainMinerServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainMiner_PushBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JsonBlockString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainMinerServer).PushBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdb.BlockChainMiner/PushBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainMinerServer).PushBlock(ctx, req.(*JsonBlockString))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainMiner_PushTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainMinerServer).PushTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdb.BlockChainMiner/PushTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainMinerServer).PushTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainMiner_GetCurBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainMinerServer).GetCurBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockdb.BlockChainMiner/GetCurBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainMinerServer).GetCurBlock(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockChainMiner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "blockdb.BlockChainMiner",
	HandlerType: (*BlockChainMinerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _BlockChainMiner_Get_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _BlockChainMiner_Transfer_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _BlockChainMiner_Verify_Handler,
		},
		{
			MethodName: "GetHeight",
			Handler:    _BlockChainMiner_GetHeight_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _BlockChainMiner_GetBlock_Handler,
		},
		{
			MethodName: "PushBlock",
			Handler:    _BlockChainMiner_PushBlock_Handler,
		},
		{
			MethodName: "PushTransaction",
			Handler:    _BlockChainMiner_PushTransaction_Handler,
		},
		{
			MethodName: "GetCurBlock",
			Handler:    _BlockChainMiner_GetCurBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}
