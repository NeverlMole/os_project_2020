
. File system call implementation
  Using an array to store the file descriptor correspondence in the UserProcess 
  class. APIs for file opening, closing and removing are provided in 
  ThreadedKernel.fileSystem by name; APIs for file reading, writing and closing 
  are provided in machine.OpenFile. Thus we need to make a bridge in between.

  New variables defined in UserKernel:
    - private OpenFile[] FileDescr
        : Stores the array of OpenFile status associated with each file descriptor.
        : Initially stores only stdin, stdout; stores new file status for each 
          successful open/create operation.

  New functions defined in UserKernel:
    - private int AlloFileDescr()
        : Allocate a new file descriptor.
        : Find a vacancy in the FileDescr array and return, return -1 if none 
          exists.
    - private boolean checkDescr(int a)
        : Check if a is a valid file descriptor, e.g. a corresponds to an opened
          file.
    - private int handleOpen, handleClose, handleOpen, handleRead, handleWrite,
      handleUnlink
        : Implements the functions as in syscall.h.

  Modification to functions in UserProcess:
    - UserProcess()
        : Initilize the FileDescr array: set 0, 1 as the stdin, stdout.

. Vitual memory allocation
  Using a list to store all the free physical page in UserKernel class and also
  a lock to protect the mutex of the physical page allocation. API for
  allocating and free memory pages are provided in UserKernel class. A bitmap
  storing the state of each physical page is also stored in UserKernel class to
  make sure no page are allocated twice or free twice.

  New variables defined in UserKernel:
    - private list<int> freePageList
        : the list of all free physical pages.
    - private boolean[] isPageUsed
        : represented where a physical page is used.
    - private lock pageAllocationLock
        : lock for page allocation.

  New functions defined in UserKernel:
    - public int allocatePage()
        : Use the lock to protect mutex of physical pages.
        : Find a free page to allocate, double check the page using isPageUsed,
          update freePageList and isPageUsed and return the page number.
    - public void freePage(int ppn)
        : Use the lock to protect mutex of physical pages.
        : Check ppn is used and updage freePageList and isPageUsed.

  Modification to functions in UserKernel:
    - initialize(String)
        : Add initilization for freePageList, isPageUsed and
          pageAllocationLock.

  Modification to functions in UserProcess:
    - loadSection()
        : Add the allocation of physical memory using UserKernel.allocatePage()
          and set pageTable accordingly. Return false if no free page lefts and
          also free the pages allocated.
        : Load the section to the accoresponding physical page according to
          pageTable and also change the mark of readOnly according to the mark
          of section.
    - readVirtualMemory(int, byte[], int, int)
        : Modify the physical address according to pageTable.
    - writeVirtualMemory(int, byte[], int, int)
        : Modify the physical address according to pageTable.
        : Not allow to write to read-only pages.

. System call halt
  Use a flag isRoot to represent whether a process is root process and return
  immediately in handleHalt if the process is not rootProcess.

. System call exec, exit and join
  Each process has its own Process ID and we use a static variable to represent
  the next Process ID. Each process also has a list of its child processes.
  Process ID start from 0 and the process with 0 process ID is the root
  process. We also use a static variable to denote the number of processes
  still alive. Also, we use a variable to represent its return status if it
  successfully returned and a variable to represent whether it exited normally.

  For exit, we define a new function in UserProcess that deals with the cleanup
  after exiting the process no matter whether it exits normally or abnormally.
  In the function, the file descriptors is freed, memory is freed by
  unloadSections(), the corresponding thread is finished or the kernel is
  terminated if it is the last process. The function is also used in
  handleSyscall and handleException for abnormal cases.

  For join, we use childList to check whether the pid is valid for join
  and use join() from thread to do it.

  New variables defined in UserProcess:
    - private int processID
    - private static int nextProcessID
    - private list<UserProcess> childList
        : stored all its child Processes.
    - private static int numRunningProcess
    - private int returnStatus
    - private boolean normallyExit
        : initially false.
    - private UThread thread
        : the corresponding thread that execute the process.

  Modification to functions in UserProcess:
    - execute(String, String[])
        : Initialize this.thread.
        : Init processID and isRoot.
        : Update nextProcessID and numRunningProcess.
    - unloadSections()
        : Free all the memory page allocated by UserKernel.freePage().

  New functions defined in UserProcess:
    - private int handleExec(int fileAddr, int argc, int argvAddr)
        : Get the file name and argv[] using readVirtualMemoryString. Check
          argc is non-negative.
        : Create a new UserProcess and run UserProcess.execute() to execute the
          new process. If not succeed, return -1.
        : Update the childList.
        : Return the new process ID.
    - private void finish()
        : Close coff, file descriptors.
        : Free the memory by unloadSections().
        : Run this.thread.finish() if the process is not the last one.
        : Run UserKernel.terminate() if the process is the last one.
        : Check the function never return.
    - private void handleExit(int status)
        : Set nonmallyExit to true and set returnStatus to status.
        : Run this.finish().
    - private int handleJoin(int pid, int statusAddr)
        : Find the child process with pid in childList. Return -1 if not
          find. If find, denote the child process as child.
        : Run child.thread.join().
        : If the child exit normally, write child.returnStatus to statusAddr
          by writeVirtualMemory and return 1.
        : If the child exit abnormally, return 0.

. Lottery Scheduler
  The current implementation follows almost naturally from the priority scheduler
  last time with the following modification:

  - newThreadState
      : Has the same functionality as ThreadState, but used in the lottery
        scheduler.
  - newThreadState.ticket
      : Caches the number of tickets one process holds.
  - newThreadState.updateLottery()
      : Like updateEffectivePriority(), calculates the ticket transfer and updates
        newThreadState.ticket.
      : It is assumed that the initial ticket number equals to the priority (with
        minimum 1).
 - LotteryQueue.poll2()
      : Holds a lottery among the waiting tickets, returns the winner (null if no
        one is waiting).
 - LotteryQueue.SumTicket()
      : Calculate the total number of tickets in the waiting queue waitPQueue (see
        doc1.txt for the implementation of waitPQueue in PriorityQueue).


. Test cases from Java-level
  - Memory allocate, free, read and write test in UserProcess.memoryTest()
      : Create a new process and use UserKernel.allocatePage() to allocate
        several pages. Some pages have label read only.
      : Write values to valid memory using writeVirtualMemory and read the
        values using readVirtualMemory.
      : Write values to read only pages.
      : Read from and write to invalid virtual memory.
      : Free the pages and also try some illegal cases.
      : The purpose is to test allocate, free, read and write functions.

. Test cases from c-level
  - Read and write from consoles (keyboards, terminal) in ter_read_write.c
      : Create a process that echos the input from keyboard.
      : The purpose is to test whether stdin, stdout is correctly set.

  - Read and write from files (keyboards, terminal) in file_read_write.c
      : Create a process that creates a file, write certain contents into it, and
        read the whole file to print it on the screen.
      : The purpose is to test the basic functionalities of create, read, etc.

  - Exec test in exec.c
      : Run different code via exec.c.
      : The purpose is to test whether exec system call is correctly coded.
        Also, it can be used to other following test processes.

  - Halt test in halt.c
      : Create a non-root process and let it execute halt.c.
      : The purpose is to test whether the non-root process can execute halt
        and also the exec system call.

  - Echo test in echo.c
      : Create a process and execute echo.c with different parameters.
      : The purpose is to test whether a process can read its parameters.

  - Exec/join/exit test in exec_join.c, exit.c and abExit.coff
      : exit.c runs exit() with different status given by process arguments.
      : abExit.coff is a file with random code which causes the unhandled
        exception.
      : exec_join.c executes exit.c with different arguments, execute
        abExit.coff and executes with bad parameters. Then print their process
        id or -1 for the cases of execution fail.
      : exec_join.c then join the child process id and also join a non-child
        process id. Then, print the return values and status.
      : The purpose is to test all the return cases for exec and join.

  - Read and Write memory test in fib.c
      : Compute fibonacci sequence in fib.c using an array.
      : The purpose is to test whether a process can read and write from
        an array.

  - Array index test in array.c
      : Creat an array with length 10 and try to read or write to array entry
        with index 20.
      : The purpose is to test the error of index out of range.
