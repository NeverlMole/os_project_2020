github URL: https://github.com/NeverlMole/os_project_2020
!!!!!!!!!!!!!!!  The project three is in blockdb_go directory !!!!!!!!!!!!!!!!!

. To run the server and test see blockdb_go/README

. Transaction Structure in blockdb_go/log_protobuf
  Struct values:
    - TransID
        : Indicate the transaction number. The i-th transaction should have
          TransID i.
    - OrderID
        : Indicate the transaction number for all stored transaction. The i-th
          stored transaction should have OrderID i.
    - Type
    - UserID
    - Value
    - FromID
    - ToID

. util Package in blockdb_go/util

  Major functions:
    - ReadBlock()
        : Read a block file.
        : Check whether the block if valid:
            - BlockID is correct.
            - Block length is currect.
            - transactions have correct OrderID
          Return error if not valid.
        : Return a log list of transactions from the block.
    - ReadLogs()
        : Read the log one by one from disk. The OrderID of the one-by-one
          transactions from the logs should be consecutive. If the log file or
          the transactions are not consecutive, return DataMissingErr.
        : If there are invalid log file other than the last one, return
          DataMissingErr.
        : Otherwise, return the log.
    - WriteBlock()
        : Turn a list of log with full-length into a block and write it to
          disk.
    - WriteLog()
        : Write a log term to the disk.
    - CleanLogs()
        : Remove all the logs in the disk in an decreasing order.

. AccountStates Structure in blockdb_go/account
  When a new user id is asked, create a new term in map with value 0. If a
  user id is invalid, directly return an error.

  Member variables:
    - data map[string]int32
        : A map with user id as key and account balance as value.
        : Initially empty.

  Member functions:
    - Apply(transaction)
        : Apply a transaction accordingly.
        : Return error if not succeed.
    - Check(transaction)
        : Similar to apply but does not apply the transaction.
    - Get(userID)
        : Check whether the userID is valid. Return InvalidUserIDErr if not
          valid.
        : Return the balance of an given account.

. Server Structure in blockdb_go/server

  Member variables:
    - curStates AccountStates
    - curLog []*Transactions

  Major public member functions:
    - Init()
        : Read the blocks stored on disk one by one using log.ReadBlock(). If
          valid, apply it to the curStates. If the apply does not succeed or
          the block is invalid, which means the block is corrupted, then mark
          the block as corrupted. If the block is corrupted or there is no new
          block then stop.
        : Read the logs using log.ReadLog() to curLog. If return error, then
          the server stop with error. Otherwise, check whether the logs are
          compatible with the blocks:
            - If the previous block has marked corrupted, the logs have to be
              of full length.
            - The OrderID of the first log should be less than or equal to the
              OrderID of the last log of the last valid block plused by 1.
          If not compatible, return DataMissErr and stop the server.
        : If the OrderID of the first log is less than the OrderID of the last log
          of the last valid block plused by 1, set the curLog to empty. Remove
          all the log file
        : Reapply all the transaction in curLog to the curStates. If the apply
          does not succeed, return DataMissErr.

    - Get()
        : Return the information from curStates.

    - Apply(transaction)
        : Try to apply the transaction to the current states. Return not
          succeed if the transaction is invalid.
        : Add the transaction to log and also write the log to disk.
        : Store the log into block if log length is full.
        : Change logLength accordingly.
        : Return succeed if no error occurs.

    - Other operation {Put, Deposit, ...}
        : Generate a transaction accordingly and run Apply().

. The main function main() in blockdb_go/main
  : Read the information from config.json.
  : Create and init a server.
  : Start the server.

. Errors in blockdb_go/secure
  - InvalidUserIDErr{userID}
  - BalanceNotEnoughErr{userID, balance, amount}
  - InvalidTypeErr{}
  - TransactionErr{transID, reason}
  - WriteLogFailErr{id, reason}
  - WriteBlockFailErr{id, reason}
  - BlockInvalidErr{id}
  - ApplyInconsistentErr{}
  - ServerInitErr{reason}
  - DataMissingErr{}
  - LogsInvalidErr{d, reason}

. Test cases in blockdb_go/test
  Since TA had given some test cases, we only tested several cases that didn't
  checked by TA's tests.

  - Recovery test in test_rec.go
      : An client calls the server to run a set of random operations and it
        compute the correct result itself.
      : The server will crash frequently by direct killing the server.
      : Check whether the answer is always correct.
      : The purpose of the test is to test whether the recovery work for
        the server crash failure.

  - Concurrent test in test_con.go
      : A client "company" constantly deposite money to an account "emp".
      : Several clients constantly transfer money from account "emp"
        to account "game".
      : The client "company" checks whether the sum of "emp" and "kejing" are
        equals to the money it deposite.
      : The purpose of the test is to test whether the server can handle the
        concurrent client requests.

  - Data missing test in test_missing.go
      : We prepare a set of good recover data with logs and block by run 103
        operations and restart the server after deleting several files in the
        data as the following ways:
          - Remove block 1.
          - Remove block 2.
          - Change the block 1.
          - Change the block 2.
      : All the cases should result in the server failure.
      : The purpose of the test is to test whether the server will crash if
        some data is missing.
