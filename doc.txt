. KThread.join()
  Here we need to set the current thread to sleep and weak it up when the
  thread that was called (this) finished executing. Since we also need to
  donate the priority, we use a ThreadQueue called joinQueue to store the one
  that waiting for the current thread.

  New variables defined:
    - private ThreadQueue joinQueue
        : initialized when first calling join

  Specific changes to KThread.join():
    - If the thread (this) is finished, return directly.
    - Check join is not previously called by checking joinQueue is null.
    - View the join as a source, let the thread acquire the source and let the
      current thread wait via joinQueue.
    - Disable interrupt and restore at the end just like KThread.yield().

  Specific changes to KThread.finish():
    - If the current thread has the joinQueue, wake the thread in joinQueue.

  Father-sons test case in KThread.fatherSonsTest():
    - Run father thread and fork several sons thread.
    - Father thread wait for each son to finish before forking another son.
    - Father thread wait for sons to finish after forking all sons.
    - The purpose is to test whether the father thread could wait for each son
      thread to finish correctly and also whether the father thred could
      return immediately if the joining son has already finished.

. Condition2
  We direct use the same implementation as in Condition, except we replace
  the semaphore operations by the operations of KThread. More specificly,
  replace P() by sleep and V() by ready. The corretness can be checked by
  comparing the commands executed in the two situation. Also, we need to
  disable interrupt and restore the interrupt in the similar way as that in
  Semaphore.

  Waiting test in Condition2.waitingTest():
    - Let a thread sleep for condition but not wake up.
    - The purpose is to test whether the sleep actions is correct.

  Join test in Condition2.joinTest():
    - Use condition to realizing join function.
    - Let a father thread fork a son thread and then sleep. Son thread will
      wake the father thread up before finishing.
    - The purpose is to test whether the thread could wake up correctly.

. Alarm
  We use a list to store the threads waiting and their wake up time. Then, we
  wake up all threads that are eady to wake up in timerInterrupt. We could
  realize the sleep-wake of a thread in the similar way as in the implementa-
  -tion of Condition2.

  New variables defined:
    - private list<KThread, long> waitingQueue
        : initialized when first calling a alarm is construct

  Specific changes to waitUntil():
    - Add current thread and wakeTime to waitingQueue.
    - Let current thread sleep.

  Specific changes to timerInterrupt():
    - Wake all the thread in waitingQueue with wakeTime greater than machine
      time before the current thread yield.

  Clocks test case in Alarm.clocksTest():
    - Let several threads to sleep for a while and check theirs wake-up time.
    - The purpose is to test whether the alarm could act properly.

. Communicator
  We could view the communicator as communicating via a channel such that each
  time only one speaker and one listener could use the channel and also the
  channel has no buffer, which means only when both speaker and listener use
  the channel the message could send.

  Therefore, we use four condition variables in a communicator, that is:
    - listenChannel, representing a listener could use the channel.
    - speakChannel, representing a speaker could use the channel.
    - speakerSended, representing the speaker using the channel sended its
      message to the channel.
    - listenerReceived, representing the listener using the channel received
      the message sent by the speaker.

  Also, we use a variable buf to present the message trying to send by the
  speaker that use the channel.

  When a new listener comes, if there are other listeners not finishing, let it
  wait for listenChannel. Otherwise, or in the cases that it is woken up from
  listenChannel, which means it could use the channel, check whether a message
  is sent from the channel. If not, let it wait for speakerSended until a
  message is sent from the channel. Then, let it make a response and wake up
  the speaker waiting for listenerReceived. Before finishing, it wakes a
  listener waiting for listenChannel to inform it could enter the listen
  channel.

  When a new speaker comes, if there are other speakers not finishing, let it
  wait for speakChannel. Otherwise, or in the cases that it is woken up from
  speakChannel, which means it could use the channel, let it send a message to
  the channel by putting the message in buf and wake up the listener waiting
  for speakerSended. Then, let the speaker wait for listenerReceived. The
  speaker finishes when it receives the response from the listener and then it
  wakes up a speaker waiting for speakChannel to inform it could enter the
  speaker channel.

  Listener waiting test case in Communicator.listenerWaitingTest():
    - Run several listeners first and then run speakers.
    - The purpose is to test whether it works in listener-waiting situation.

  Speaker waiting test case in Communicator.speakerWaitingTest():
    - Run several speakers first and then run listeners.
    - The purpose is to test whether it works in speaker-waiting situation.

  General test case in Communicator.generalTest():
    - Run several speakers and listeners in interleaving order.
    - The purpose is to test whether it works when there are many speakers and
      listeners run at the same time.

. PriorityScheduler
  The situations that efficientPriority of a thread might change are:
    - It receives a donation from another thread. Then it should update its own
      efficientPriority. If its own efficientPriority increase, it continues to
      donate the priority to the thread that it is waiting for.
    - It acquires a new sources and its efficientPrioirity should be updated by
      the maximum of the efficientPriority of the corresponding waitQueue. Note
      here we don't need to continue to donate the priority since the thread
      must not be blocked by others.
    - It release a new sources and its efficentPriority should be recalculated.
      Similarly to above case, we don't need to update the efficientPriority
      of other here.
    - Its priority is changed by setPrioirty. Here we need to recalculate the
      efficientPrioirty and also update all the efficient prioity of threads
      affected by its donation.


. Boat
  We can easily know there are three kind of trips with different conditions 
  in the best strategies:
    1.Two children from Oahu to Molokai (condition1: Child in Oahu, Boat in 
      Oahu, and number of children in Oahu >= 2).
    2.One adult from Oahu to Molokai. (condition2: Adult in Oahu, Boat in Oahu, 
      and number of children in Oahu < 2).
    3.One child from Molokai to Oahu. (condition3: Child in Molokai, Boat in 
      Molokai).
   
  So the easy way is use three condition variables to organize the three 
  conditions, and we find the three conditions are mutually exclusive. If the 
  conditions aren't satisfied, then we sleep. Until satisfied, we wake a thread
  corresponding to the this condition variable.

  And also we need to design these common variables:
    - "boat" The boat place (The information everybody can know)
    - "has_pilot" Do there has pilot(Because when two children go, they must be 
      a pilot and a rider, we will let first child become pilot, hence others 
      can know there is a pilot and go to be a rider).
    - Numbers of adults/children in Oahu/Molokai (Everybody can just know the 
      number of same side).
    - Three condition variables for condition 1, 2, 3.
    - A condition variable to describe whether is finished, and it can let the 
      parent thread sleep.

  Hence we finish the problem like this:
    - First, in the "begin()", we fork the "child" and "adult" threads, and 
      initialize all the common variables. Then we let it sleep and switch to 
      other threads.
    - For adult thread, first take the lock. He only have a trip from Oahu to 
      Molokai. So you only need to wait the "condition2" satisfied and go to 
      Molokai.
    - For child thread, first take the lock. He may go and return between two 
      places. So you need to use a private variable to describe the place. And 
      each time:
        1.In Oahu, waiting for the "condition 1". If there's no pilot, then 
          this thread become pilot. And also wake a thread which wait for 
          "condition 1", and let it become the rider(use common variable 
          "has_pilot"). After go to Molokai, update the common variables. If all 
          people have reached Molokai, then wake parent thread, otherwise, just 
          wake the corresponding thread.
        2.In Molokai, waiting for the "condition 3", and go to Oahu, update the 
          common variables. And judge the number of children in Oahu, wake the 
          corresponding thread.
        3.After go for a trip, the current thread must be sleep otherwise there 
          will be more than one threads awake at same time.

  SelfTest:
    This part of this problem is easy, I just test some like "3 3", "10 9", "17 
    5", "5 20", and it all perform correctly.

. Some other modification on the original code.
  - Check the status of the current thread is not running.
  - Change one line yield(); to KThread.yield(); in KThread class.

. Note
  - All the check should be use Lib.assertTrue.

. Strange stuff found
  - The Lock and Semaphore use the waitQueue with priority but Condition not.
